1.4
장고는 새로 킬때마다
pipenv shell
django-admin이 잘 실행되는지 봐야한다.

2.0
프로젝트 시작시 홈페이지에 있는 방법 말고
만들어둔 파일에 django-admin startproject config를 추천한다.

우선 python for vscode python extension pack 두 가지를 깔아준다.(윈도우는 꼭.)
vscode의 settings에서 default formatter를 파이썬으로 설정.
그러면 파일 안에 config 파일이 생기는데 Aconfig 또는 다른 이름으로 바꾸는걸 추천한다.
그다음 그 안에 있는 config 파일과 manage.py를 밖으로 꺼내고 이름 바꾼 파일은 지운다.

이때 manage.py를 켜보면 에러들이 있을탠데
안나온다면 extension에서 파이썬을 깔아야한다.

ctrl+shift+p -> python:select interpreter -> 맨 밑에꺼 -> pipenv가 파일명에 써져있는 파이썬 버젼 선택
.vscode가 생길수도 있고 안생길수도 있다.

2.1
파이썬은 compile 언어가 아니다. 그래서 Linter를 설치하면 파이썬에서 에러가 생기는 부분을 미리 감지해준다.(PEP8을 따라서)
그 이후 terminal에 &pipenv install flake8 또는 ctrl+shift+p->select Linter->flake8->설치안되어 있다고 뜨면 거기서 설치
Formatter는 black을 추천하고 prettier와 하는 역할이 같다. pipenv install black --dev --pre
setting.json파일이 안바꼈었는데 manage.py 파일에 ctrl+s를 하니 다른게 설치되어있다고 뜨고 밑에 black을 사용하겠느냐 떠서 해보니 된다.
아마 그전에 vscode의 settings에서 default formatter를 파이썬으로 설정해줘야하는거 같다.

text black
"python.linting.flake8Args":["--max-line-length=88"]
로 config settings.py의 길이 에러를 잡아준다. 하나는 유질될탠데 91은 너무 길어서 어쩔수 없다.

text flake8
같은 파일에 저장을 해보면 작은 따음표가 쌍 따음표로 바뀌는거 볼 수 있다.

2.2
settings.py에서 TIME_ZONE = "Asia/Seoul"로 바꿔준다.

2.3 마우스 올리고 ctrl+p를 누르면 함수의 위치로 갈수 있다. 가끔 안될때도 있으니 화내지 말자.`
ctrl+z 가 서버를 끄는거라고 하는데 안되니 ctrl+c를 사용하자

python manage.py makemigrations
settings.py 파일을 다음과 같이 바꾼다.
'NAME': str(os.path.join(BASE_DIR, "db.sqlite3"))

python manage.py createsuperuser

2.4
맨 처음 project를 생성하면 우리의 data base는 empty상태이다.
이로인하여 경고가 빨간색 경고가 발생하고 있다.

migrate 명령을 실행하여 경고 메시지에 있던 앱들이 필요로 하는 테이블들을 생성하면된다.
=>python manage.py migrate

migrate를 통해 admin, auth, contenttypes, sessions 앱이 사용하는 테이블이 생성되었음을 알려준다. 이렇게 테이블이 생성되면 Django는 어떤 항목들을 읽어들어야 할지 알게된다.
이로인하여 오류가 해결된다.

2.5
group function의 집합을 Applications
Applications의 집합을 project

application을 만들때는 가장 작은 범위를 가지게끔 해야한다. 즉, 폴더는 크면 절때 안된다.
한 문장으로 표현할 수 없다면 그 애플리케이션은 조깨져야한다.

2.6
django-admin startapp application_name(복수형)
messages는 파일명으로 쓰면 안된다. 이미 있다.

3.0
1) model == 데이터가 보여지는 모습 (데이터 테이블을 정의하는 것)

2) class User(AbstractUser):
니꼬쌤이 admin 페이지 에서 보여준 user에 관한 정보를 상속하여 확장한다.
차후 추가적인 정보인 성별, 관심사 등등 확장해 나갈 수 있다.

3) app은 settings.py에 등록해야 사용가능

4) 기존에 Django에는 user 라는 app이 이미 존재함.
따라서 우리가 만든 users app과 충돌이 발생함
=> db.sqllite3를 제거후, AUTH_USER_MODEL 등록시 Django는 우리가 만든 users app을 인식하게 됨

3.1
models.py에 만들어 넣어준 User class를 admin.py에 입력해준다.
models.py
from django.contrib.auth.models import AbstractUser
from django.db import models

# Create your models here.
class User(AbstractUser):
    bio = models.TextField()


admin.py
from django.contrib import admin
from . import models

# Register your models here.
@admin.register(models.User)
class CustomUserAdmin(admin.ModelAdmin):
    pass

이러면 에러가 뜨는데 그 이유는 데이터베이스에 User.bio라는 항목이 없기 때문이다.
그래서 데이터베이스를 만들어줘야한다.
python manage.py makemigrations
하지만 이 또한 default가 없어서 실행이 안된다.
class User(AbstractUser):
    bio = models.TextField(default="")
바꿔주고 다시 실행한다.
이후 python manage.py migrate를 실행한다.
그러면 bio파일이 생긴다.

3.2
bio = models.TextField(default="")
또는 bio = models.TextField(null=True)를 해도 된다.

class User(AbstractUser):

    """Custom User Model"""

    avatar = models.ImageField(null=True)
    gender = models.CharField(max_length=10, null=True)
    bio = models.TextField(default="")

이미지를 설치하기 위해서는 pipenv install Pillow를 해줘야한다.

TextField는 글자수 제한 없이 쓸수 있다.
CharField는 한줄 짜리 텍스트이다.(character field)

CharField는 chooses를 사용하여 커스터마이즈가 가능하다.
class User(AbstractUser):

    """Custom User Model"""

    GENDER_MALE = "male"
    GENDER_FEMALE = "female"
    GENDER_OTHER = "other"

    GENDER_CHOICES = (
        (GENDER_MALE, "Male"),
        (GENDER_FEMALE, "Female"),
        (GENDER_OTHER, "Other"),
    )

    avatar = models.ImageField(null=True)
    gender = models.CharField(choices=GENDER_CHOICES, max_length=10, null=True)
    bio = models.TextField(default="")

    이렇게.

    admin에서 제출할려고 하면 빈칸일시 에러가 뜬다. null=True는 데이터베이스에서 적용되는 거고 admin자체에서 할려면 blank=True를 적용해줘야한다.

3.4
admin.py
@admin.register(models.User)를 대신해서 하단의
admin.site.register(models.User, CustomUserAdmin)을 사용한다.

@--- 를 decorater라고 하는데 이들은 class위에 있어야 작동한다.

class CustomUserAdmin(admin.ModelAdmin):
    list_display = ("username", "gender", "language", "currency", "superhost")
를 줘서 admin에 보이는 list를 만들수 있다.

class CustomUserAdmin(admin.ModelAdmin):
    """Custon User Admin"""

    list_display = ("username", "gender", "language", "currency", "superhost")
    list_filter = ("superhost", "language", "currency")

filter도 줄 수 있다.

3.5
fieldsets은 파란색 줄인데 이걸 추가하는 방법을 배워볼것이다.
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from . import models

# Register your models here.
@admin.register(models.User)
class CustomUserAdmin(UserAdmin):
    """Custon User Admin"""

    fieldsets = UserAdmin.fieldsets + (("Banana", {"fields": ("avatar", "gender", "bio")}),)

4.0
room 모델을 만들기 위해서 우선 config의 settings에 추가한다.
PROJECT_APPS = ["users.apps.UsersConfig", "rooms.apps.RoomsConfig"]

이후 rooms/models.py에
from django.db import models

# Create your models here.
class Room(models.Model):
    """Room Model Definition"""

    pass

그후 rooms/admin.py에
from django.contrib import admin
from . import models

# Register your models here.
@admin.register(models.Room)
class RoomAdmin(admin.ModelAdmin):
    pass

룸이 업데이트 될때마다 알 수 있게 할것이다.
created = models.DateTimeField()
updated = models.DateTimeField()
이 두가지를 쓸것이다 많은 곳에서 쓰인다. 그래서
django-admin startapp core를 하여 core파일을 불러온다.

core/models.py에
from django.db import models

# Create your models here.
class TimeStampedModel(models.Model):
    """Time Stamped Model"""

    created = models.DateTimeField()
    updated = models.DateTimeField()
후

config/settings.py에 추가해준다.
PROJECT_APPS = ["core.apps.CoreConfig","users.apps.UsersConfig", "rooms.apps.RoomsConfig"]

하지만 TimeStampedModel은 데이터베이스에 전송되지 않길 원한다.
class TimeStampedModel(models.Model):
    """Time Stamped Model"""

    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now = True)

    class Meta:
        abstract = True

위를 바꿧기 때문에 rooms/models.py를
from django.db import models
from core import models as core_models

# Create your models here.
class Room(core_models.Model):
    """Room Model Definition"""
    pass
와 같이 바꿔준다.

4.1
room항목을 만들꺼다.
나라 이름을 전부 필요로 하는데 너무 많기에 장고를 사용한다.
pipenv install django-countries
이후 config/settings.py
THIRD_PARTY_APPS = ["django_countries"]
INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS
추가해준다.
from django.db import models
from core import models as core_models
from django_countries.fields import CountryField

# Create your models here.
class Room(core_models.TimeStampedModel):
    """Room Model Definition"""

    name = models.CharField(max_length=140)
    description = models.TextField()
    country = CountryField()

최종
from django.db import models
from core import models as core_models
from django_countries.fields import CountryField
from users import models as user_models

# Create your models here.
class Room(core_models.TimeStampedModel):
    """Room Model Definition"""

    name = models.CharField(max_length=140)
    description = models.TextField()
    country = CountryField()
    city = models.CharField(max_length=80)
    price = models.IntegerField()
    address = models.CharField(max_length=140)
    guests = models.IntegerField()
    beds = models.IntegerField()
    bedrooms = models.IntegerField()
    baths = models.IntegerField()
    check_in = models.TimeField()
    check_out = models.TimeField()
    instant_book = models.BooleanField(default=False)
    host = models.ForeignKey(user_models.User, on_delete=models.CASCADE)

4.2
ForeignKey는 모델간의 연결을 도와준다.
일대다 관계이다.

4.3
입력값을 튜닝할 수 있다.
class Room(core_models.TimeStampedModel):
    """Room Model Definition"""

    name = models.CharField(max_length=140)
    description = models.TextField()
    country = CountryField()
    city = models.CharField(max_length=80)
    price = models.IntegerField()
    address = models.CharField(max_length=140)
    guests = models.IntegerField()
    beds = models.IntegerField()
    bedrooms = models.IntegerField()
    baths = models.IntegerField()
    check_in = models.TimeField()
    check_out = models.TimeField()
    instant_book = models.BooleanField(default=False)
    host = models.ForeignKey(user_models.User, on_delete=models.CASCADE)

    def __str__(self):
        return self.name

다대다 관계.
from django.db import models
from core import models as core_models
from django_countries.fields import CountryField
from users import models as user_models


class AbstractItem(core_models.TimeStampedModel):
    """Abstract Item"""

    name = models.CharField(max_length=80)

    class Meta:
        abstract = True

    def __str__(self):
        return self.name


class RoomType(AbstractItem):
    pass


# Create your models here.
class Room(core_models.TimeStampedModel):
    """Room Model Definition"""

    name = models.CharField(max_length=140)
    description = models.TextField()
    country = CountryField()
    city = models.CharField(max_length=80)
    price = models.IntegerField()
    address = models.CharField(max_length=140)
    guests = models.IntegerField()
    beds = models.IntegerField()
    bedrooms = models.IntegerField()
    baths = models.IntegerField()
    check_in = models.TimeField()
    check_out = models.TimeField()
    instant_book = models.BooleanField(default=False)
    host = models.ForeignKey(user_models.User, on_delete=models.CASCADE)
    room_type = models.ManyToManyField(RoomType, blank=True)

    def __str__(self):
        return self.name

rooms/admin.py
from django.contrib import admin
from . import models

# Register your models here.
@admin.register(models.RoomType)
class ItemAdmin(admin.ModelAdmin):
    pass


@admin.register(models.Room)
class RoomAdmin(admin.ModelAdmin):
    pass

4.4
from django.db import models
from core import models as core_models
from django_countries.fields import CountryField
from users import models as user_models


class AbstractItem(core_models.TimeStampedModel):
    """Abstract Item"""

    name = models.CharField(max_length=80)

    class Meta:
        abstract = True

    def __str__(self):
        return self.name


class RoomType(AbstractItem):
    """RoomType Object Definition"""

    pass


class Amenity(AbstractItem):
    """Amenity Object Definition"""

    pass


class Facility(AbstractItem):
    """Facility Model Definition"""

    pass


class HouseRule(AbstractItem):
    """HouseRule Model Definition"""

    pass


# Create your models here.
class Room(core_models.TimeStampedModel):
    """Room Model Definition"""

    name = models.CharField(max_length=140)
    description = models.TextField()
    country = CountryField()
    city = models.CharField(max_length=80)
    price = models.IntegerField()
    address = models.CharField(max_length=140)
    guests = models.IntegerField()
    beds = models.IntegerField()
    bedrooms = models.IntegerField()
    baths = models.IntegerField()
    check_in = models.TimeField()
    check_out = models.TimeField()
    instant_book = models.BooleanField(default=False)
    host = models.ForeignKey(user_models.User, on_delete=models.CASCADE)
    room_type = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True)
    amenities = models.ManyToManyField(Amenity)
    facilities = models.ManyToManyField(Facility)
    house_rules = models.ManyToManyField(HouseRule)

    def __str__(self):
        return self.name

rooms/admin.py
@admin.register(models.RoomType, models.Facility, models.Amenity, models.HouseRule)
class ItemAdmin(admin.ModelAdmin):
    pass

하지만 rooms에 들어가보면 복수형이 틀리게 적용된걸 볼수 있다.
다음 시간에~

4.5
class Amenity(AbstractItem):
    """Amenity Object Definition"""

    class Meta:
        verbose_name_plural = "Amenities"
이렇게 바꾸준다.

class RoomType(AbstractItem):
    """RoomType Object Definition"""

    class Meta:
        verbose_name = "Room Type"


class Amenity(AbstractItem):
    """Amenity Object Definition"""

    class Meta:
        verbose_name_plural = "Amenities"


class Facility(AbstractItem):
    """Facility Model Definition"""

    class Meta:
        verbose_name_plural = "Facilities"


class HouseRule(AbstractItem):
    """HouseRule Model Definition"""

    class Meta:
        verbose_name = "House Rule"

또한
ordering = ["created"] 정렬도 가능하다.
ordering = ["name"]

모델이 많을때는 스트링으로 하는것도 방법이다.
from django.db import models
from core import models as core_models
from django_countries.fields import CountryField


class AbstractItem(core_models.TimeStampedModel):
    """Abstract Item"""

    name = models.CharField(max_length=80)

    class Meta:
        abstract = True

    def __str__(self):
        return self.name


class RoomType(AbstractItem):
    """RoomType Object Definition"""

    class Meta:
        verbose_name = "Room Type"


class Amenity(AbstractItem):
    """Amenity Object Definition"""

    class Meta:
        verbose_name_plural = "Amenities"


class Facility(AbstractItem):
    """Facility Model Definition"""

    class Meta:
        verbose_name_plural = "Facilities"


class HouseRule(AbstractItem):
    """HouseRule Model Definition"""

    class Meta:
        verbose_name = "House Rule"


class Photo(core_models.TimeStampedModel):
    """Photo Model Definition"""

    caption = models.CharField(max_length=80)
    file = models.ImageField()
    room = models.ForeignKey("Room", on_delete=models.CASCADE)

    def __str__(self):
        return self.caption


# Create your models here.
class Room(core_models.TimeStampedModel):
    """Room Model Definition"""

    name = models.CharField(max_length=140)
    description = models.TextField()
    country = CountryField()
    city = models.CharField(max_length=80)
    price = models.IntegerField()
    address = models.CharField(max_length=140)
    guests = models.IntegerField()
    beds = models.IntegerField()
    bedrooms = models.IntegerField()
    baths = models.IntegerField()
    check_in = models.TimeField()
    check_out = models.TimeField()
    instant_book = models.BooleanField(default=False)
    host = models.ForeignKey("users.User", on_delete=models.CASCADE)
    room_type = models.ForeignKey("RoomType", on_delete=models.SET_NULL, null=True)
    amenities = models.ManyToManyField("Amenity", blank=True)
    facilities = models.ManyToManyField("Facility", blank=True)
    house_rules = models.ManyToManyField("HouseRule", blank=True)

    def __str__(self):
        return self.name

사진 넣기 기능을 위해
rooms/admin.py
@admin.register(models.Photo)
class PhotoAdmin(admin.ModelAdmin):
    """Photo Admin Definition"""
    pass

5.0
review 모델을 만든다.
항상 그렇듯 처음에 config.settings에 추가해준다.
PROJECT_APPS = [
    "core.apps.CoreConfig",
    "users.apps.UsersConfig",
    "rooms.apps.RoomsConfig",
    "reviews.apps.ReviewsConfig",
]

reviews/models.py
from django.db import models
from core import models as core_models

# Create your models here.


class Review(core_models.TimeStampedModel):

    """Review Model Definition"""

    review = models.TextField()
    accuracy = models.IntegerField()
    communication = models.IntegerField()
    cleanliness = models.IntegerField()
    location = models.IntegerField()
    check_in = models.IntegerField()
    value = models.IntegerField()
    user = models.ForeignKey("users.User", on_delete=models.CASCADE)
    room = models.ForeignKey("rooms.Room", on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.review} - {self.room}"

reviews/admin.py
from django.contrib import admin
from . import models

# Register your models here.
@admin.register(models.Review)
class ReviewAdmin(admin.ModelAdmin):

    """Review Admin Definition"""

    pass

6.0 Room Admin Panel
city 리스트: https://github.com/coderholic/django-cities

6.1 Room Admin Panel part Two
rooms/migrations/admin.py
from django.contrib import admin
from . import models

# Register your models here.
@admin.register(models.RoomType, models.Facility, models.Amenity, models.HouseRule)
class ItemAdmin(admin.ModelAdmin):
    """Item Admin Definition"""

    pass


@admin.register(models.Room)
class RoomAdmin(admin.ModelAdmin):
    """Room Admin Definition"""

    fieldsets = (
        (
            "Basic Info",
            {"fields": ("name", "description", "country", "address", "price")},
        ),
        (
            "Times",
            {"fields": ("check_in", "check_out", "instant_book")},
        ),
        (
            "Spaces",
            {"fields": ("guests", "beds", "bedrooms", "baths")},
        ),
        (
            "More About the Space",
            {
                "classes": ("collapse",),#접어두는 형식을 부여한다.
                "fields": ("amenities", "facilities", "house_rules"),
            },
        ),
        (
            "Last Details",
            {"fields": ("host",)},
        ),
    )

    list_display = (
        "name",
        "country",
        "city",
        "price",
        "address",
        "guests",
        "beds",
        "bedrooms",
        "baths",
        "check_in",
        "check_out",
        "instant_book",
    )

    list_filter = (
        "instant_book",
        "host__superhost",
        "room_type",
        "amenities",
        "facilities",
        "house_rules",
        "city",
        "country",
    )

    search_fields = ("^city", "^host__username")
    #아무것도 없을시 django자체적으로 검색을 해준다.
    #^=startwith 등 다양한 형식이 있다.

    filter_horizontal = (
        "amenities",
        "facilities",
        "house_rules",
    )
    pass
    #다양한 필터가 있을때 선택할 수 있겠금 해준다.


@admin.register(models.Photo)
class PhotoAdmin(admin.ModelAdmin):
    """Photo Admin Definition"""

    pass

#6.2 Custom Admin Functions
ordering = ("name", "price", "bedrooms")
#정렬을 하게 해준다.
물론 admin panel에서 클릭을 하므로써 추가 혹은 삭제 할 수 있다.
